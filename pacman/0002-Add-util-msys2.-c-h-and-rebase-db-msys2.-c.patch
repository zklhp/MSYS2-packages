From 843c05e513e05e528d220ef307be4c7c8bd70506 Mon Sep 17 00:00:00 2001
From: Ray Donnelly <mingw.android@gmail.com>
Date: Sun, 15 Jun 2014 16:11:54 +0100
Subject: [PATCH 2/4] Add util-msys2.{c,h} and rebase-db-msys2.{c,}

.. From Cygwin's rebase program. Will be used for rebasing
when installing in chroots when making new installer releases.
---
 lib/libalpm/Makefile.am       |   2 +
 lib/libalpm/rebase-db-msys2.c | 137 ++++++++++++++++++++++++++
 lib/libalpm/rebase-db-msys2.h |  85 ++++++++++++++++
 lib/libalpm/util-msys2.c      | 218 ++++++++++++++++++++++++++++++++++++++++++
 lib/libalpm/util-msys2.h      |  20 ++++
 lib/libalpm/util.c            |   2 +-
 src/pacman/conf.h             |   2 +
 src/pacman/pacman.c           |   3 +
 src/pacman/sync.c             |  21 ++++
 9 files changed, 489 insertions(+), 1 deletion(-)
 create mode 100644 lib/libalpm/rebase-db-msys2.c
 create mode 100644 lib/libalpm/rebase-db-msys2.h
 create mode 100644 lib/libalpm/util-msys2.c
 create mode 100644 lib/libalpm/util-msys2.h

diff --git a/lib/libalpm/Makefile.am b/lib/libalpm/Makefile.am
index f66daed..1649814 100644
--- a/lib/libalpm/Makefile.am
+++ b/lib/libalpm/Makefile.am
@@ -53,6 +53,8 @@ libalpm_la_SOURCES = \
 	trans.h trans.c \
 	util.h util.c \
 	util-common.h util-common.c \
+	util-msys2.h util-msys2.c \
+	rebase-db-msys2.h rebase-db-msys2.c \
 	version.c
 
 if !HAVE_LIBSSL
diff --git a/lib/libalpm/rebase-db-msys2.c b/lib/libalpm/rebase-db-msys2.c
new file mode 100644
index 0000000..d6a6cb7
--- /dev/null
+++ b/lib/libalpm/rebase-db-msys2.c
@@ -0,0 +1,137 @@
+/*
+ * Copyright (c) 2011 Corinna Vinschen
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ * See the COPYING file for full license information.
+ */
+#include "rebase-db-msys2.h"
+
+#include <inttypes.h>
+
+const char IMG_INFO_MAGIC[4] = "rBiI";
+const ULONG IMG_INFO_VERSION = 1;
+
+size_t
+get_rebasedb_filename(char *result, size_t maxlen)
+{
+    size_t requiredlen = strlen ("/etc/rebase.db.x86_64") + 1;
+    if (result == NULL) {
+        return requiredlen;
+    }
+    strncpy(result, "/etc/rebase.db.x86_64", maxlen-1);
+    result[maxlen-1] = '\0';
+    return requiredlen;
+}
+
+int
+img_info_cmp (const void *a, const void *b)
+{
+  ULONG64 abase = ((img_info_t *) a)->base;
+  ULONG64 bbase = ((img_info_t *) b)->base;
+
+  if (abase < bbase)
+    return -1;
+  if (abase > bbase)
+    return 1;
+  return strcmp (((img_info_t *) a)->name, ((img_info_t *) b)->name);
+}
+
+int
+img_info_name_cmp (const void *a, const void *b)
+{
+  return strcmp (((img_info_t *) a)->name, ((img_info_t *) b)->name);
+}
+
+void
+dump_rebasedb_header (FILE *f, img_info_hdr_t const *h)
+{
+  if (h == NULL)
+    {
+      fprintf (f, "Rebase DB Header is null\n");
+      return;
+    }
+
+  fprintf (f,
+      "Header\n"
+      "  magic  : %c%c%c%c\n"
+      "  machine: %s\n"
+      "  version: %d\n"
+      "  base   : 0x%0*" PRIx64 "\n"
+      "  offset : 0x%08x\n"
+      "  downflg: %s\n"
+      "  count  : %d\n",
+      h->magic[0], h->magic[1], h->magic[2], h->magic[3],
+      (h->machine == IMAGE_FILE_MACHINE_I386
+      ? "i386"
+      : (h->machine == IMAGE_FILE_MACHINE_AMD64
+        ? "x86_64"
+        : "unknown")),
+      h->version,
+      (h->machine == IMAGE_FILE_MACHINE_I386 ? 8 : 12),
+      (uint64_t) h->base,
+      (uint32_t) h->offset,
+      (h->down_flag ? "true" : "false"),
+      (uint32_t) h->count);
+}
+
+void
+dump_rebasedb_entry (FILE *f,
+                     img_info_hdr_t const *h,
+                     img_info_t const *entry)
+{
+  if (h == NULL)
+    {
+      fprintf (f, "Rebase DB Header is null\n");
+      return;
+    }
+  if (entry == NULL)
+    {
+      fprintf (f, "Rebase DB Entry is null\n");
+      return;
+    }
+  fprintf (f,
+      "%-*s base 0x%0*" PRIx64 " size 0x%08x slot 0x%08x %c\n",
+      h->machine == IMAGE_FILE_MACHINE_I386 ? 45 : 41,
+      entry->name,
+      h->machine == IMAGE_FILE_MACHINE_I386 ? 8 : 12,
+      (uint64_t) entry->base,
+      (uint32_t) entry->size,
+      (uint32_t) entry->slot_size,
+      entry->flag.needs_rebasing ? '*' : ' ');
+}
+
+void
+dump_rebasedb (FILE *f, img_info_hdr_t const *h,
+               img_info_t const *list, unsigned int sz)
+{
+  unsigned int i;
+  if (h == NULL)
+    {
+      fprintf (f, "Rebase DB Header is null\n");
+      return;
+    }
+  if (list == NULL)
+    {
+      fprintf (f, "Rebase DB List is null\n");
+      return;
+    }
+
+  dump_rebasedb_header (stdout, h);
+  for (i = 0; i < sz ; ++i)
+    {
+      dump_rebasedb_entry (stdout, h, &(list[i]));
+    }
+}
+
diff --git a/lib/libalpm/rebase-db-msys2.h b/lib/libalpm/rebase-db-msys2.h
new file mode 100644
index 0000000..c4a9f05
--- /dev/null
+++ b/lib/libalpm/rebase-db-msys2.h
@@ -0,0 +1,85 @@
+/*
+ * Copyright (c) 2011 Corinna Vinschen
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ * See the COPYING file for full license information.
+ */
+#ifndef REBASE_DB_H
+#define REBASE_DB_H
+
+#include <windows.h>
+#include <stdio.h>
+#include <inttypes.h>
+
+#define roundup(x,y)	((((x) + ((y) - 1)) / (y)) * (y))
+#define roundup2(x,y)	(((x) + (y) - 1) & ~((y) - 1))
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+extern const char IMG_INFO_MAGIC[4];
+extern const ULONG IMG_INFO_VERSION;
+
+#pragma pack (push, 4)
+
+typedef struct _img_info_hdr
+{
+  CHAR    magic[4];	/* Always IMG_INFO_MAGIC.                            */
+  WORD    machine;	/* IMAGE_FILE_MACHINE_I386/IMAGE_FILE_MACHINE_AMD64  */
+  WORD    version;	/* Database version, always set to IMG_INFO_VERSION. */
+  ULONG64 base;		/* Base address (-b) used to generate database.      */
+  ULONG   offset;	/* Offset (-o) used to generate database.            */
+  BOOL    down_flag;	/* Always TRUE right now.                            */
+  ULONG   count;	/* Number of img_info_t entries following header.    */
+} img_info_hdr_t;
+
+typedef struct _img_info
+{
+/*  union { */
+    PCHAR   name;	/* Absolute path to DLL.  The strings are stored     */
+    ULONG64 _filler;	/* right after the img_info_t table, in the same     */
+/*  }; */			/* order as the img_info_t entries.                  */
+  ULONG   name_size;	/* Length of name string including trailing NUL.     */
+  ULONG64 base;		/* Base address the DLL has been rebased to.         */
+  ULONG   size;		/* Size of the DLL at rebased time.                  */
+  ULONG   slot_size;	/* Size of the DLL rounded to allocation granularity.*/
+  struct {		/* Flags                                             */
+    ULONG needs_rebasing : 1; /* Set to 0 in the database.  Used only        */
+			      /* while rebasing.                             */
+    ULONG cannot_rebase  : 2; /* Set to 0 in the database.  Used only        */
+			      /* while rebasing.                             */
+  } flag;
+} img_info_t;
+
+#pragma pack (pop)
+
+/* Pass NULL as result to get the length needed. */
+size_t get_rebasedb_filename(char *result, size_t maxlen);
+
+int img_info_cmp (const void *a, const void *b);
+int img_info_name_cmp (const void *a, const void *b);
+
+void dump_rebasedb_header (FILE *f, img_info_hdr_t const *h);
+void dump_rebasedb_entry  (FILE *f, img_info_hdr_t const *h,
+                           img_info_t const *entry);
+void dump_rebasedb (FILE *f, img_info_hdr_t const *h,
+                    img_info_t const *list, unsigned int sz);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
diff --git a/lib/libalpm/util-msys2.c b/lib/libalpm/util-msys2.c
new file mode 100644
index 0000000..116e4d3
--- /dev/null
+++ b/lib/libalpm/util-msys2.c
@@ -0,0 +1,218 @@
+/*
+ *  util-msys.c
+ *
+ *  Copyright (c) 2014 Ray Donnelly <mingw.android@gmail.com>
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <stdlib.h>
+#include <unistd.h>
+#include <ctype.h>
+#include <dirent.h>
+#include <time.h>
+#include <syslog.h>
+#include <errno.h>
+#include <limits.h>
+#include <sys/wait.h>
+#include <fnmatch.h>
+#include <sys/fcntl.h>
+
+#include "rebase-db-msys2.h"
+
+#ifdef __x86_64__
+WORD machine = IMAGE_FILE_MACHINE_AMD64;
+#else
+WORD machine = IMAGE_FILE_MACHINE_I386;
+#endif
+ULONG64 image_base = 0;
+BOOL down_flag = FALSE;
+BOOL force_rebase_flag = FALSE;
+BOOL image_oblivious_flag = FALSE;
+/* Added to support MSYS2. If you do not use database mode (-s)
+then the files are not sorted by name. Also, duplicates are
+not removed from the list as a pre-process. Instead, a linear
+search is performed over the already-processed files and if
+the file in question was already done then it is skipped. */
+BOOL obey_order_flag = FALSE;
+ULONG offset = 0;
+
+const char *progname = "pacman";
+
+img_info_t *img_info_list = NULL;
+unsigned int img_info_size = 0;
+unsigned int img_info_rebase_start = 0;
+unsigned int img_info_max_size = 0;
+
+char *db_file = NULL;
+
+/** Loads a database in. */
+int _alpm_load_msys_db(const char *db_name)
+{
+    int fd;
+    ssize_t read_ret;
+    int ret = 0;
+    int i;
+    img_info_hdr_t hdr;
+  
+    fd = open (db_file, O_RDONLY | O_BINARY);
+    if (fd < 0)
+      {
+        /* It's no error if the file doesn't exist.  However, in this case
+       the -b option is mandatory. */
+        if (errno == ENOENT && image_base)
+          return 0;
+        fprintf (stderr, "%s: failed to open rebase database \"%s\":\n%s\n",
+             progname, db_file, strerror (errno));
+        return -1;
+      }
+    /* First read the header. */
+    if ((read_ret = read (fd, &hdr, sizeof hdr)) != sizeof hdr)
+      {
+        if (read_ret < 0)
+      fprintf (stderr, "%s: failed to read rebase database \"%s\":\n%s\n",
+           progname, db_file, strerror (errno));
+        else
+      fprintf (stderr, "%s: premature end of rebase database \"%s\".\n",
+           progname, db_file);
+        close (fd);
+        return -1;
+      }
+    /* Check the header. */
+    if (memcmp (hdr.magic, IMG_INFO_MAGIC, 4) != 0)
+      {
+        fprintf (stderr, "%s: \"%s\" is not a valid rebase database.\n",
+             progname, db_file);
+        close (fd);
+        return -1;
+      }
+    if (hdr.machine != machine)
+      {
+        if (hdr.machine == IMAGE_FILE_MACHINE_I386)
+      fprintf (stderr,
+  "%s: \"%s\" is a database file for 32 bit DLLs but\n"
+  "I'm started to handle 64 bit DLLs.  If you want to handle 32 bit DLLs,\n"
+  "use the -4 option.\n", progname, db_file);
+        else if (hdr.machine == IMAGE_FILE_MACHINE_AMD64)
+      fprintf (stderr,
+  "%s: \"%s\" is a database file for 64 bit DLLs but\n"
+  "I'm started to handle 32 bit DLLs.  If you want to handle 64 bit DLLs,\n"
+  "use the -8 option.\n", progname, db_file);
+        else
+      fprintf (stderr, "%s: \"%s\" is a database file for a machine type\n"
+               "I don't know about.", progname, db_file);
+        close (fd);
+        return -1;
+      }
+    if (hdr.version != IMG_INFO_VERSION)
+      {
+        fprintf (stderr, "%s: \"%s\" is a version %u rebase database.\n"
+                 "I can only handle versions up to %u.\n",
+             progname, db_file, hdr.version, (uint32_t) IMG_INFO_VERSION);
+        close (fd);
+        return -1;
+      }
+    /* If no new image base has been specified, use the one from the header. */
+    if (image_base == 0)
+      {
+        image_base = hdr.base;
+        down_flag = hdr.down_flag;
+      }
+    if (offset == 0)
+      offset = hdr.offset;
+    /* Don't enforce rebasing if address and offset are unchanged or taken from
+       the file anyway. */
+    if (image_base == hdr.base && offset == hdr.offset)
+      force_rebase_flag = FALSE;
+    img_info_size = hdr.count;
+    /* Allocate memory for the image list. */
+    if (ret == 0)
+      {
+        img_info_max_size = roundup (img_info_size, 100);
+        img_info_list = (img_info_t *) calloc (img_info_max_size,
+                           sizeof (img_info_t));
+        if (!img_info_list)
+      {
+        fprintf (stderr, "%s: Out of memory.\n", progname);
+        ret = -1;
+      }
+      }
+    /* Now read the list. */
+    if (ret == 0
+        && (read_ret = read (fd, img_info_list,
+                 img_info_size * sizeof (img_info_t)))
+       != img_info_size * sizeof (img_info_t))
+      {
+        if (read_ret < 0)
+      fprintf (stderr, "%s: failed to read rebase database \"%s\":\n%s\n",
+           progname, db_file, strerror (errno));
+        else
+      fprintf (stderr, "%s: premature end of rebase database \"%s\".\n",
+           progname, db_file);
+        ret = -1;
+      }
+    /* Make sure all pointers are NULL. */
+    if (ret == 0)
+      for (i = 0; i < img_info_size; ++i)
+        {
+      img_info_list[i].name = NULL;
+      /* Ensure that existing database entries are not touched when
+       *  --oblivious is active, even if they are out-of sync with
+       *  reality. */
+      if (image_oblivious_flag)
+        img_info_list[i].flag.cannot_rebase = 2;
+        }
+    /* Eventually read the strings. */
+    if (ret == 0)
+      {
+        for (i = 0; i < img_info_size; ++i)
+      {
+        img_info_list[i].name = (char *)
+                    malloc (img_info_list[i].name_size);
+        if (!img_info_list[i].name)
+          {
+            fprintf (stderr, "%s: Out of memory.\n", progname);
+            ret = -1;
+            break;
+          }
+        if ((read_ret = read (fd, img_info_list[i].name,
+                  img_info_list[i].name_size))
+            != img_info_list[i].name_size)
+          {
+            if (read_ret < 0)
+          fprintf (stderr, "%s: failed to read rebase database \"%s\": "
+               "%s\n", progname, db_file, strerror (errno));
+            else
+          fprintf (stderr,
+               "%s: premature end of rebase database \"%s\".\n",
+               progname, db_file);
+            ret = -1;
+            break;
+          }
+      }
+      }
+    close (fd);
+    /* On failure, free all allocated memory and set list pointer to NULL. */
+    if (ret < 0)
+      {
+        for (i = 0; i < img_info_size && img_info_list[i].name; ++i)
+      free (img_info_list[i].name);
+        free (img_info_list);
+        img_info_list = NULL;
+        img_info_size = 0;
+        img_info_max_size = 0;
+      }
+    return ret;
+}
+
diff --git a/lib/libalpm/util-msys2.h b/lib/libalpm/util-msys2.h
new file mode 100644
index 0000000..77c97ec
--- /dev/null
+++ b/lib/libalpm/util-msys2.h
@@ -0,0 +1,20 @@
+/*
+ *  util-msys.c
+ *
+ *  Copyright (c) 2014 Ray Donnelly <mingw.android@gmail.com>
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+int _alpm_load_msys_db(const char *db_name);
diff --git a/lib/libalpm/util.c b/lib/libalpm/util.c
index d565fdb..05d24c9 100644
--- a/lib/libalpm/util.c
+++ b/lib/libalpm/util.c
@@ -307,7 +307,7 @@ char *get_command_line(const char* cmd, char *const argv[])
     while (argv[nargs] != NULL) {
         len += strlen(argv[nargs++]) + 1;
     }
-    char *result = malloc(len) + 1;
+    char *result = malloc(len + 1);
     strcpy(result, cmd);
     strcat(result, " ");
     for (size_t arg = 0; arg < nargs; ++arg) {
diff --git a/src/pacman/conf.h b/src/pacman/conf.h
index e8cac50..9455f47 100644
--- a/src/pacman/conf.h
+++ b/src/pacman/conf.h
@@ -40,6 +40,7 @@ typedef struct __config_t {
 	unsigned short verbose;
 	unsigned short version;
 	unsigned short help;
+    unsigned short rebase;
 	unsigned short noconfirm;
 	unsigned short noprogressbar;
 	unsigned short logmask;
@@ -167,6 +168,7 @@ enum {
 	OP_FILE,
 	OP_PRINT,
 	OP_QUIET,
+    OP_ROOTREBASE,
 	OP_ROOT,
 	OP_RECURSIVE,
 	OP_SEARCH,
diff --git a/src/pacman/pacman.c b/src/pacman/pacman.c
index b733933..df1ea83 100644
--- a/src/pacman/pacman.c
+++ b/src/pacman/pacman.c
@@ -461,6 +461,8 @@ static int parsearg_global(int opt)
 			free(config->dbpath);
 			config->dbpath = strdup(optarg);
 			break;
+		case OP_ROOTREBASE:
+			config->rebase = 1;
 		case OP_ROOT:
 		case 'r':
 			free(config->rootdir);
@@ -930,6 +930,7 @@ static int parseargs(int argc, char *argv[])
 		{"print",      no_argument,       0, OP_PRINT},
 		{"quiet",      no_argument,       0, OP_QUIET},
 		{"root",       required_argument, 0, OP_ROOT},
+		{"rootrebase", required_argument, 0, OP_ROOTREBASE},
 		{"sysroot",    required_argument, 0, OP_SYSROOT},
 		{"recursive",  no_argument,       0, OP_RECURSIVE},
 		{"search",     no_argument,       0, OP_SEARCH},
diff --git a/src/pacman/sync.c b/src/pacman/sync.c
index 4609186..2280938 100644
--- a/src/pacman/sync.c
+++ b/src/pacman/sync.c
@@ -906,6 +906,27 @@ int pacman_sync(alpm_list_t *targets)
 		return ret;
 	}
 
+#if defined(__MSYS__)
+    if (config->rebase) {
+		/* copy the /etc/rebase.db.x86_64 - this shouldn't be here since
+	      _alpm_copyfile is private to libalpm; fix this once it is all
+	      working correctly. */
+		int _alpm_copyfile(const char *src, const char *dest);
+		size_t get_rebasedb_filename(char *result, size_t maxlen);
+
+		char db_filename_src[260];
+		size_t len = get_rebasedb_filename(&db_filename_src[0], sizeof(db_filename_src));
+		size_t len_root = strlen(config->rootdir);
+		char *db_filename_dst = (char*)alloca(len + len_root + 2);
+		strcpy(db_filename_dst, config->rootdir);
+		if (db_filename_dst[strlen(db_filename_dst)-1] != '/') {
+			strcat(db_filename_dst, "/");
+		}
+		strcat(db_filename_dst, db_filename_src);
+		_alpm_copyfile(db_filename_src, db_filename_dst);
+	}
+#endif
+
 	if(check_syncdbs(1, 0)) {
 		return 1;
 	}
-- 
2.1.2

